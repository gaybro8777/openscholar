<?php

/**
 * @file
 * Hook implementations for the vsite module.
 */

use Drupal\group\Entity\Group;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Form\FormStateInterface;
use Drupal\views\ViewExecutable;
use Drupal\vsite\Cache\VsiteCacheContext;

/**
 * Implements hook_modules_installed().
 */
function vsite_modules_installed(array $modules) {
  vsite_setup_new_apps();
}

/**
 * Sets up associations between app content and group types.
 * @todo this needs work
 */
function vsite_setup_new_apps() {
  // TODO: Fix this so it doesn't block installs.
  return;
  \Drupal::service('vsite.app.manager')->clearCachedDefinitions();
  $defs = \Drupal::service('vsite.app.manager')->getDefinitions();

  /** @var \Drupal\group\Entity\Storage\GroupContentTypeStorageInterface $groupContentStorage */
  $groupContentStorage = \Drupal::entityTypeManager()->getStorage('group_content_type');
  /** @var \Drupal\group\Plugin\GroupContentEnablerCollection $allPlugins */
  $allPlugins = \Drupal::service('plugin.manager.group_content_enabler')->getAll();
  $group_types = \Drupal::entityTypeManager()->getStorage('group_type')->loadMultiple();
  $map = [];
  foreach ($allPlugins as $p) {
    if ($p->getEntityTypeId() == 'node') {
      $map[$p->getEntityBundle()] = $p->getPluginId();
    }
  }
  $existing = $groupContentStorage->loadByEntityTypeId('node');
  $config = [
    'group_cardinality' => 1,
    'use_creation_wizard' => 0,
  ];

  foreach ($defs as $d) {
    if ($d['entityType'] != 'node') {
      continue;
    }

    foreach ($group_types as $type => $gt) {
      $k = $type . '-group_node-' . $d['bundle'];
      error_log($k);
      if (empty($existing[$k])) {
        $groupContentStorage->createFromPlugin($gt, $map[$d['bundle']], $config)->save();
      }
    }
  }
}

/**
 * Implements hook_views_data_alter().
 */
function vsite_views_data_alter(&$data) {
  $data['group_content']['current_vsite_filter'] = [
    'title' => t('Current Vsite Filter'),
    'filter' => [
      'title' => t('Current Vsite Filter'),
      'help' => 'Filters content on the current vsite',
      'field' => 'gid',
      'id' => 'vsite_current_filter',
    ],
  ];
  $data['groups']['subsite_vsite_filter'] = [
    'title' => t('Subsite Filter'),
    'filter' => [
      'title' => t('Subsite Filter'),
      'help' => 'Filters child sites on the current vsite',
      'field' => 'field_parent_site',
      'id' => 'vsite_subsite_filter',
    ],
  ];
}

/**
 * Implements hook_pathauto_alias_alter().
 */
function vsite_pathauto_alias_alter(&$alias, array &$context) {
  /** @var \Drupal\vsite\Plugin\VsiteContextManagerInterface $vsiteContext */
  $vsiteContext = \Drupal::service('vsite.context_manager');

  /** @var \Drupal\group\Entity\GroupInterface $group */
  if ($group = $vsiteContext->getActiveVsite()) {
    $purl = $vsiteContext->getActivePurl();
    $trimmed_alias = ltrim($alias, '/');
    $alias = '/' . $purl . '/' . $trimmed_alias;
  }
}

/**
 * Implements hook_form_node_form_alter().
 */
function vsite_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\vsite\Plugin\VsiteContextManagerInterface $vsiteContext */
  $vsiteContext = \Drupal::service('vsite.context_manager');

  if ($group = $vsiteContext->getActiveVsite()) {
    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
    $entity = $form_state->getFormObject()->getEntity();
    $form_state->set('group', $group);
    $form_state->set('group_content_enabler', 'group_node:' . $entity->bundle());
    foreach (Element::children($form['actions']) as $name) {

      // Skip buttons without submit handlers.
      if (empty($form['actions'][$name]['#submit'])) {
        continue;
      }

      // Skip buttons that do not properly build and save an entity.
      $submit = $form['actions'][$name]['#submit'];
      if (!in_array('::submitForm', $submit) || !in_array('::save', $submit)) {
        continue;
      }

      // If we are using the wizard, we need to substitute the entity save
      // handler in order to add the entity to the private temp store.
      $form['actions'][$name]['#submit'][] = 'group_content_entity_submit';
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function vsite_form_alter(&$form, FormStateInterface $formState, $form_id) {
  if ($formState->getFormObject() instanceof EntityFormInterface) {

    /** @var \Drupal\vsite\Plugin\VsiteContextManagerInterface $vsiteContext */
    $vsiteContext = \Drupal::service('vsite.context_manager');

    /** @var \Drupal\Core\Entity\EntityInterface $entity */
    $entity = $formState->getFormObject()->getEntity();
    $entityTypeId = $entity->getEntityTypeId();
    /** @var \Drupal\group\Entity\GroupInterface $group */
    if ($group = $vsiteContext->getActiveVsite()) {
      $groupTypeId = $group->bundle();

      /** @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface $groupContentEnabler */
      $groupContentEnabler = \Drupal::service('plugin.manager.group_content_enabler');
      $plugins = $groupContentEnabler->getGroupTypePluginMap();
      $availablePlugins = $plugins[$groupTypeId];

      $plugin_id = 'group_entity:' . $entity->getEntityTypeId();
      if (in_array($plugin_id, $availablePlugins)) {
        $formState->set('group', $group);
        $formState->set('group_content_enabler', $plugin_id);
        foreach (Element::children($form['actions']) as $name) {

          // Skip buttons without submit handlers.
          if (empty($form['actions'][$name]['#submit'])) {
            continue;
          }

          // Skip buttons that do not properly build and save an entity.
          $submit = $form['actions'][$name]['#submit'];
          if (!in_array('::submitForm', $submit) || !in_array('::save', $submit)) {
            continue;
          }

          // If we are using the wizard, we need to substitute the entity save
          // handler in order to add the entity to the private temp store.
          $form['actions'][$name]['#submit'][] = 'group_content_entity_submit';
        }
      }
    }
    $allowedSubSites = \Drupal::config('vsite.settings')->get('allowed_subsite_group_types');
    if ($entityTypeId == 'group' && !in_array($entity->bundle(), $allowedSubSites)) {
      $form['field_parent_site']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_views_pre_build().
 */
function vsite_views_pre_build(ViewExecutable $view) {
  if (!empty($view->filter['current_vsite_filter'])) {
    /** @var \Drupal\vsite\Plugin\VsiteContextManagerInterface $vsiteContext */
    $vsiteContext = \Drupal::service('vsite.context_manager');
    if ($group = $vsiteContext->getActiveVsite()) {
      $view->element['#cache']['contexts'][] = 'vsite:' . $vsiteContext->getActiveVsite()->id();
    }
    else {
      $view->element['#cache']['contexts'][] = 'vsite:none';
    }
  }
}

/**
 * Implements hook_toolbar_alter().
 */
function vsite_toolbar_alter(&$toolbar) {
  $toolbar['toolbar_menu_control_panel']['tray']['toolbar_menu_control_panel_links']['#pre_render'][] = '_vsite_prerender_control_panel_links';
}

/**
 * Adds the current vsite to list of this build array's cache contexts.
 *
 * @param array $element
 *   The full toolbar render array.
 *
 * @return array
 *   The modified element
 */
function _vsite_prerender_control_panel_links(array $element) {
  /** @var \Drupal\vsite\Plugin\VsiteContextManagerInterface $vsiteContext */
  $vsiteContext = \Drupal::service('vsite.context_manager');
  $metadata = CacheableMetadata::createFromRenderArray($element['toolbar_menu_control-panel']);
  if ($group = $vsiteContext->getActiveVsite()) {
    $metadata->addCacheContexts(['vsite:' . $vsiteContext->getActiveVsite()->id()]);
  }
  else {
    $metadata->addCacheContexts([VsiteCacheContext::VSITE_CACHE_CONTEXTS_NONE]);
  }

  $metadata->applyTo($element['toolbar_menu_control-panel']);

  return $element;
}

/**
 * Get all group id that related with field parent site.
 *
 * @param \Drupal\group\Entity\Group $group
 *   Parent group entity.
 *
 * @return array|int
 *   List of the related and parent gids.
 */
function _vsite_get_group_and_subsite_ids(Group $group) {
  $query = \Drupal::entityQuery('group')
    ->condition('field_parent_site', $group->id());

  $gids = $query->execute();
  // Add parent group to list.
  $gids[$group->id()] = $group->id();
  return $gids;
}
